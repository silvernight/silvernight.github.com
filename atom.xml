<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jamel Octopress Blog]]></title>
  <link href="http://silvernight.github.com/atom.xml" rel="self"/>
  <link href="http://silvernight.github.com/"/>
  <updated>2012-12-20T15:03:20+08:00</updated>
  <id>http://silvernight.github.com/</id>
  <author>
    <name><![CDATA[Jamel@Silvernight]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[毕业设计]]></title>
    <link href="http://silvernight.github.com/blog/2012/12/02/bi-ye-she-ji/"/>
    <updated>2012-12-02T19:56:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/12/02/bi-ye-she-ji</id>
    <content type="html"><![CDATA[<h2>毕业设计的设想：</h2>

<p>1、聊天软件
2、字典软件
3、播放器</p>

<!--more-->


<p>4、服务器（多媒体服务器、游戏服务器、网盘、云服务器）</p>

<pre><code>例子:
    游戏服务器：mongos
    服务器开发框架：easynetwork
</code></pre>

<p>5、邮件客户端
6、ftp服务器、客户端</p>

<h3>参考实例：</h3>

<p>QT实现的聊天软件：</p>

<pre><code>&lt;http://blog.csdn.net/aaa20090987/article/details/6998514&gt;
</code></pre>

<p>太阳神三国杀(C++,QT)</p>

<pre><code>&lt;https://github.com/Moligaloo/QSanguosha&gt;
</code></pre>

<p>网狐6.6.0.1棋牌全套源码包括视频教程</p>

<pre><code>&lt;http://www.hicode.cn/download/view-software-8910.html&gt;
</code></pre>

<p>OwnCloud</p>

<pre><code>&lt;http://owncloud.org/support/install/&gt;
</code></pre>

<h3>参考网站:</h3>

<pre><code>&lt;svn.jundie.net&gt;    里面有一些托管在这个网站的项目
</code></pre>

<h3>参考博客：</h3>

<pre><code>&lt;http://blog.csdn.net/AAA20090987/&gt;     C++、QT、 Linux博客
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim自动化命令]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/26/vimzi-dong-hua-ming-ling/"/>
    <updated>2012-11-26T19:30:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/26/vimzi-dong-hua-ming-ling</id>
    <content type="html"><![CDATA[<p>参考链接:<a href="http://www.ibm.com/developerworks/cn/linux/l-vim-script-5/">http://www.ibm.com/developerworks/cn/linux/l-vim-script-5/</a>
刚刚联想到snipmate的代码补全时循环变量的自动复写更新的功能很有趣。
于是自己想简单模拟写了一条自动命令，写得很粗糙：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup repeatline
</span><span class='line'>autocmd <span class="nb">CursorMovedI</span> *.txt :<span class="k">call</span> setline<span class="p">(</span>line<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)+</span><span class="m">1</span><span class="p">,</span> getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[copy and swap technique]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/26/copy-and-swap-technique/"/>
    <updated>2012-11-26T09:26:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/26/copy-and-swap-technique</id>
    <content type="html"><![CDATA[<p>Copy and Swap 技术可以在一定程度上来解决对某个对象进行修改时抛出异常的问题。
例如，当对某个容器进行插入操作时可以这样实现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Cont</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Iter</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">insert</span> <span class="p">(</span><span class="n">Cont</span><span class="o">&amp;</span> <span class="n">coll</span><span class="p">,</span> <span class="k">const</span> <span class="n">Iter</span><span class="o">&amp;</span> <span class="n">pos</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Cont</span> <span class="n">tmp</span><span class="p">(</span><span class="n">coll</span><span class="p">);</span>              <span class="cm">/* copy container and all elements */</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>      <span class="cm">/* modify the copy */</span>
</span><span class='line'>    <span class="n">coll</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>              <span class="cm">/* use copy (in case no exception was thrown) */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template techniques]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/26/template-techniques/"/>
    <updated>2012-11-26T07:19:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/26/template-techniques</id>
    <content type="html"><![CDATA[<p>C++模板的类型：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Type 1</span>
</span><span class='line'><span class="n">tempalte</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">max</span> <span class="p">(</span><span class="n">cont</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">cont</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Type 2</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="kt">int</span> <span class="n">theValue</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">elem</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">elem</span> <span class="o">+=</span> <span class="n">theValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">f1</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">col1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">for_each</span><span class="p">(</span><span class="n">col1</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">col1</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">add</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ifstream和getline读取文件内容]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/25/shi-yong-ifstreamhe-getlinedu-qu-wen-jian-nei-rong/"/>
    <updated>2012-11-25T19:13:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/25/shi-yong-ifstreamhe-getlinedu-qu-wen-jian-nei-rong</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (ifstreamANDgetline.cpp)</span> <a href='http://silvernight.github.com/downloads/code/cpp/stl/ifstreamANDgetline.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">ReadDataFromFileWBW</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="s">&quot;test.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">fin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Read from file:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">ReadDataFromFileLBLIntoCharArray</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="s">&quot;test.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">LINE_LENGTH</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">LINE_LENGTH</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">getline</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">LINE_LENGTH</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Read from file: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">ReadDataFromFileLBLIntoString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="s">&quot;test.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Read from file:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">ReadDataWithErrChecking</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;test.cpp&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="n">filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Error opening&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;for input&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ReadDataFromFileWBW</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ReadDataFromFileLBLIntoCharArray</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ReadDataFromFileLBLIntoString</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ReadDataWithErrChecking</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STL Algorithm实用函数]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/25/stl-algorithmshi-yong-han-shu/"/>
    <updated>2012-11-25T18:52:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/25/stl-algorithmshi-yong-han-shu</id>
    <content type="html"><![CDATA[<h3>随机洗牌函数random_shuffle</h3>

<p>如果要保证每次程序运行时的洗牌结果不一样，需要在调用该函数前，调用srand(time(NULL))</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">nt</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ivec</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">ivec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>  <span class="n">random_shuffle</span><span class="p">(</span><span class="n">ivec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ivec</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  <span class="n">copy</span><span class="p">(</span><span class="n">ivec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ivec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ostream_iterator应用实例]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/25/ostream-iteratorying-yong-shi-li/"/>
    <updated>2012-11-25T09:40:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/25/ostream-iteratorying-yong-shi-li</id>
    <content type="html"><![CDATA[<p>最近在恶补STL，刚刚发现了ostream_iterator的妙用。</p>

<h2>一条代码输出vector容器的内容</h2>

<figure class='code'><figcaption><span>printout vector elements  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iterator&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// 使用copy复制vec的所有元素到标准输出，并以空格分隔</span>
</span><span class='line'>  <span class="n">copy</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">));</span>    <span class="c1">// 注意ostream_iterator的模板参数类型是int</span>
</span><span class='line'>  <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">os_iter</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot; ~ &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">*</span><span class="n">os_iter</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>            <span class="cm">/* 向cout缓冲区写入数据1.0 */</span>
</span><span class='line'>  <span class="o">*</span><span class="n">os_iter</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>            <span class="cm">/* 向cout缓冲区写入数据2.0 */</span>
</span><span class='line'>  <span class="o">*</span><span class="n">os_iter</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span>            <span class="cm">/* 向cout缓冲区写入数据3.0 */</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 2 3 4 5 6 7 8 9 10 1 ~ 2 ~ 3 ~</span></code></pre></td></tr></table></div></figure>


<h2>一条代码输出map容器的内容</h2>

<p>由于map容器存储的元素是键值对，所以不能像vector容器一样直接输出元素，
需要重载&lt;&lt;运算符。
详情参考<a href="http://www.cppblog.com/Young/archive/2012/11/18/195333.aspx">http://www.cppblog.com/Young/archive/2012/11/18/195333.aspx</a>
这里我采用了里面介绍的比较简单的第二种方法，使用transform函数取代copy函数。</p>

<figure class='code'><figcaption><span> (PrintOutMapContents.cpp)</span> <a href='http://silvernight.github.com/downloads/code/cpp/stl/PrintOutMapContents.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iterator&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="n">toString</span><span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ostringstream</span> <span class="n">ost</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ost</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;,&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ost</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">imap</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">//imap.insert( map&lt;int, int&gt;::value_type(i, i*10) );</span>
</span><span class='line'>      <span class="n">imap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">transform</span><span class="p">(</span><span class="n">imap</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">imap</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">),</span> <span class="n">toString</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>逐个单词读取文件，并输出到控制台</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iterator&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="s">&quot;FindInArray.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ifs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;file is not found&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ibeg</span><span class="p">(</span><span class="n">ifs</span><span class="p">);</span>
</span><span class='line'>  <span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">iend</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">(</span><span class="n">ibeg</span><span class="p">,</span> <span class="n">iend</span><span class="p">);</span>
</span><span class='line'>  <span class="n">copy</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用istream_iterator,ostream_iterator读取文件并输出到另一个文件</h2>

<figure class='code'><figcaption><span> (RWFileByIOstream_iterator.cpp)</span> <a href='http://silvernight.github.com/downloads/code/cpp/stl/RWFileByIOstream_iterator.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iterator&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ifstream</span> <span class="n">in_file</span><span class="p">(</span><span class="s">&quot;test.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ofstream</span> <span class="n">out_file</span><span class="p">(</span><span class="s">&quot;output_file.cpp&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">in_file</span> <span class="o">||</span> <span class="o">!</span><span class="n">out_file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;cannot open file!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">is</span><span class="p">(</span><span class="n">in_file</span><span class="p">);</span>       <span class="cm">/* first iterator */</span>
</span><span class='line'>  <span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">eof</span><span class="p">;</span>               <span class="cm">/* end of file iterator */</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// using back_inserter to call container&#39;s push_back to insert new elements</span>
</span><span class='line'>  <span class="n">copy</span><span class="p">(</span><span class="n">is</span><span class="p">,</span> <span class="n">eof</span><span class="p">,</span> <span class="n">back_inserter</span><span class="p">(</span><span class="n">text</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sort</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">text</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">os</span><span class="p">(</span><span class="n">out_file</span><span class="p">);</span>
</span><span class='line'>  <span class="n">copy</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">text</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">os</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[interview notes]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/24/interview-notes/"/>
    <updated>2012-11-24T07:38:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/24/interview-notes</id>
    <content type="html"><![CDATA[<ol>
<li>core dump的知识</li>
<li>编译内核</li>
<li>抓包知识</li>
<li>网络监控指标，监控命令</li>
<li>数据库表的复制</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转pcbeta]mac下自动运行goagent的proxy.py]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/24/macxia-zi-dong-yun-xing-goagentde-proxy-dot-py/"/>
    <updated>2012-11-24T07:11:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/24/macxia-zi-dong-yun-xing-goagentde-proxy-dot-py</id>
    <content type="html"><![CDATA[<p>在mac.pcbeta.com的论坛中发现了可以在mac下自动运行goagent的proxy.py脚本的方法：
1、终端下运行下面的命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vi /Library/LaunchDaemons/com.go.agent.plist
</span></code></pre></td></tr></table></div></figure>


<p>2、粘贴如下代码，并保存</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>com.go.agent<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;array&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>python<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>/Volumes/LENOVO/soft/Proxy/goagent-goagent-91cd5e4/local/proxy.py<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、然后在终端执行如下命令，重启即可：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown root:wheel /Library/LaunchDaemons/com.go.agent.plist
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode无证书真机调试ios]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/22/xcodewu-zheng-shu-zhen-ji-diao-shi-ios/"/>
    <updated>2012-11-22T16:08:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/22/xcodewu-zheng-shu-zhen-ji-diao-shi-ios</id>
    <content type="html"><![CDATA[<h1>xcode无证书真机调试ios</h1>

<p>记录一些资料：
os开发的，问题还很多。因为真机调试需要开发者账号，这个要一年99美元，约>    和600多块人民币。而且还需要真机越狱，破解xcode。</p>

<p>下面是一些相关链接：
http://blog.csdn.net/vrix/article/details/7851377
图文并茂 在ML OS X 10.8 + XCode4.4/4.4.1下实现无证书真机调试IOS5.1.1(亲测，附调试截图)</p>

<p>http://kqwd.blog.163.com/blog/static/4122344820117191351263/
Xcode 4.1/4.2/4.3/4.4/4.5 + iOS 5.1.1免证书(iDP)开发+真机调试+生成IPA全攻略</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The C++ STANDARD LIBRARY CHAPTER 4]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-4/"/>
    <updated>2012-11-20T16:33:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-4</id>
    <content type="html"><![CDATA[<h1>C++标准库-读书笔记-第四章&#8211;通用工具</h1>

<p>C++标准库的通用工具包括：
* 数种通用类型(general types)
* 一些重要的C函数
* 数值极限(numeric limits)
大部分通用工具定义在<utility>内。其余工具则与标准程序库中一些比较主要的组件一起描述。</p>

<h2>4.1 Pairs</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">pair</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">typedef</span> <span class="n">T1</span> <span class="n">first_type</span><span class="p">;</span>
</span><span class='line'>          <span class="k">typedef</span> <span class="n">T2</span> <span class="n">second_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">T1</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>          <span class="n">T2</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// default constructor, T1() and T2() force initialization for built-in types</span>
</span><span class='line'>          <span class="n">pair</span><span class="p">()</span> <span class="o">:</span> <span class="n">first</span><span class="p">(</span><span class="n">T1</span><span class="p">()),</span> <span class="n">second</span><span class="p">(</span><span class="n">T2</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">// constructor for two values</span>
</span><span class='line'>          <span class="n">pair</span> <span class="p">(</span><span class="k">const</span> <span class="n">T1</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T2</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">first</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">second</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// copy constructor with implicit conversions</span>
</span><span class='line'>          <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">U</span><span class="p">,</span> <span class="k">class</span> <span class="nc">V</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="n">pair</span><span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span><span class="n">V</span><span class="o">&gt;&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>              <span class="o">:</span> <span class="n">first</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">),</span> <span class="n">second</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// comparisions</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;&amp;</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">y</span><span class="p">.</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">y</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// convenience function to create Pairs</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;</span> <span class="n">make_pair</span> <span class="p">(</span><span class="k">const</span> <span class="n">T1</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">T2</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4.2 Class auto_ptr</h2>

<p>auto_ptr是一种智能指针，帮助程序员防止“异常被抛出时发生资源泄露”。它只针对某个特定问题，对其他问题无能为力。</p>

<h3>4.2.1 auto_ptr的发展动机</h3>

<p>如果资源是以显式的方式获得，而且为被系结于任何对象身上，则必须以显式手法释放。
智能指针：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// create and initialize an auto_ptr</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">(</span><span class="k">new</span> <span class="n">classA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>      <span class="c1">// OK</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassA</span><span class="p">;</span> <span class="c1">// ERROR, assign initialization is not permitted</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.2.2 auto_ptr拥有权(Ownership)的转移</h3>

<p>执行auto_ptr的copy constructor和assignment operator时将把对象的拥有权交出去：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// initialize an auto_ptr with a new object</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// copy the auto_ptr transfers ownership from ptr1 to ptr2</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr2</span><span class="p">(</span><span class="n">ptr1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialize an auto_ptr with a new object</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr2</span><span class="p">;</span> <span class="c1">// create another auto_ptr</span>
</span><span class='line'><span class="n">ptr2</span> <span class="o">=</span> <span class="n">ptr1</span><span class="p">;</span>  <span class="c1">// assign the auto_ptr transfers ownership from ptr1 to ptr2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialize an auto_ptr with a new object</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>
</span><span class='line'><span class="c1">// initialize another auto_ptr with a new object</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>
</span><span class='line'><span class="n">ptr2</span> <span class="o">=</span> <span class="n">ptr1</span><span class="p">;</span>  <span class="c1">// assign the auto_ptr delete object owned by ptr2 </span>
</span><span class='line'>              <span class="c1">// - transfers ownership from </span>
</span><span class='line'>              <span class="c1">// - ptr1 to ptr2</span>
</span></code></pre></td></tr></table></div></figure>


<h4>起点和终点</h4>

<p>1、 某函数是数据的终站
2、 某函数是数据的起点。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">);</span>   <span class="c1">// ptr owns the new oject</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ptr</span><span class="p">;</span>        <span class="c1">// transfers ownership to calling function</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">g</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">f</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>**如果你的auto_ptr在整个生命期内都不必改变其所指对象的所有权，你可以使用const auto_ptr。</p>

<h2>4.2.3 auto_ptrs 作为成员之一</h2>

<p>不使用auto_ptr作为引用成员：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">classB</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="n">ClassA</span><span class="o">*</span> <span class="n">ptr1</span><span class="p">;</span>   <span class="c1">// pointer members</span>
</span><span class='line'>      <span class="n">ClassA</span><span class="o">*</span> <span class="n">ptr2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// constructor that initializes the pointers</span>
</span><span class='line'>      <span class="c1">// - will cause resource leak if second new throws</span>
</span><span class='line'>      <span class="n">ClassB</span> <span class="p">(</span><span class="n">ClassA</span> <span class="n">val1</span><span class="p">,</span> <span class="n">ClassA</span> <span class="n">val2</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">val1</span><span class="p">)),</span> <span class="n">ptr2</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">val2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// copy constructor</span>
</span><span class='line'>      <span class="c1">// - might cause resource leak if second new throws</span>
</span><span class='line'>      <span class="n">ClassB</span> <span class="p">(</span><span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr1</span><span class="p">)),</span> <span class="n">ptr2</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// assignment operator</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr1</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr1</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr2</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr2</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">~</span><span class="n">ClassB</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">ptr1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">ptr2</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>// 利用auto_ptr，即可轻松避免这场悲剧</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">classB</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr1</span><span class="p">;</span>  <span class="c1">// pointer members</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">ClassA</span><span class="o">&gt;</span> <span class="n">ptr2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// constructor that initializes the auto_ptrs</span>
</span><span class='line'>      <span class="c1">// - no resource leak</span>
</span><span class='line'>      <span class="n">ClassB</span> <span class="p">(</span><span class="n">ClassA</span> <span class="n">val1</span><span class="p">,</span> <span class="n">ClassA</span> <span class="n">val2</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">val1</span><span class="p">)),</span> <span class="n">ptr2</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">val2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// copy constructor</span>
</span><span class='line'>      <span class="c1">// - no resource leak possible</span>
</span><span class='line'>      <span class="n">ClassB</span> <span class="p">(</span><span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">ptr1</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr1</span><span class="p">)),</span> <span class="n">ptr2</span><span class="p">(</span><span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// assignment operator</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">ClassB</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr1</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr1</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr2</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">ptr2</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// no destructor</span>
</span><span class='line'>      <span class="c1">// (default destructor lets ptr1 and ptr2 delete their objects)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.2.4 auto_ptrs的错误运用</h3>

<p>1、 auto_ptrs之间不能共享拥有权
2、 并不存在针对array而设计的auto_ptrs
3、 auto_ptrs决非一个“四海通用”的智能指针
4、 auto_ptrs不满足STL容器对其元素的要求</p>

<h3>4.2.5 auto_ptr运用实例</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  define output operator for auto_ptr</span>
</span><span class='line'><span class="cm"> *  - print object value or null </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">strm</span><span class="p">,</span> <span class="k">const</span> <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">strm</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;NULL&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">strm</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">strm</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
</span><span class='line'>  <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;after initialization:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; p: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; q: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">q</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;after assigning auto pointers:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; p: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; q: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">q</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">*</span><span class="n">q</span> <span class="o">+=</span> <span class="mi">13</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;after change and reassignment:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; p: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; q: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">q</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>类型auto_ptr的实现范例</h3>

<p>下面的范例有蛮多地方值得推敲的，不过，最近实在没什么时间研究了，以后再看好了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// util/auto_ptr.hpp</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  class auto_ptr</span>
</span><span class='line'><span class="cm"> *  - improved standard conforming implementation</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// auxiliary type to enable copies and assignment</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Y</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">auto_ptr_ref</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Y</span><span class="o">*</span> <span class="n">yp</span><span class="p">;</span>
</span><span class='line'>          <span class="n">auto_ptr_ref</span> <span class="p">(</span><span class="n">Y</span><span class="o">*</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>              <span class="o">:</span> <span class="n">yp</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">auto_ptr</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">private</span><span class="o">:</span>
</span><span class='line'>              <span class="n">T</span><span class="o">*</span> <span class="n">ap</span><span class="p">;</span> <span class="c1">// refers to the actual owned object (if any)</span>
</span><span class='line'>          <span class="k">public</span><span class="o">:</span>
</span><span class='line'>              <span class="k">typedef</span> <span class="n">T</span> <span class="n">element_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// constructor</span>
</span><span class='line'>              <span class="k">explicit</span> <span class="n">auto_ptr</span> <span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="n">ap</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// copy constructors (with implicit conversion)</span>
</span><span class='line'>              <span class="c1">// - note: nonconstant parameter</span>
</span><span class='line'>              <span class="n">auto_ptr</span> <span class="p">(</span><span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="n">ap</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">release</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Y</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="n">auto_ptr</span> <span class="p">(</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="n">ap</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">release</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// assignment (with implicit conversion)</span>
</span><span class='line'>              <span class="c1">// - note: nonconstant parameter</span>
</span><span class='line'>              <span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">reset</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">release</span><span class="p">());</span>
</span><span class='line'>                  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Y</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">reset</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">release</span><span class="p">());</span>
</span><span class='line'>                      <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// destructor</span>
</span><span class='line'>              <span class="o">~</span><span class="n">auto_ptr</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">delete</span> <span class="n">ap</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">T</span><span class="o">*</span> <span class="n">get</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">ap</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">*</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">return</span> <span class="o">*</span><span class="n">ap</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">T</span><span class="o">*</span> <span class="k">operator</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">ap</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// release ownership</span>
</span><span class='line'>              <span class="n">T</span><span class="o">*</span> <span class="n">release</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">T</span><span class="o">*</span> <span class="n">tmp</span><span class="p">(</span><span class="n">ap</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">ap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// reset values</span>
</span><span class='line'>              <span class="kt">void</span> <span class="n">reset</span> <span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">ap</span> <span class="o">!=</span> <span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">delete</span> <span class="n">ap</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">ap</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="cm">/*  sepcial conversions with autxiliary type to enable copies and assignments */</span>
</span><span class='line'>              <span class="n">auto_ptr</span><span class="p">(</span><span class="n">auto_ptr_ref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="n">ap</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">yp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="n">auto_ptr</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="n">auto_ptr_ref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">reset</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">yp</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">Y</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="k">operator</span> <span class="n">auto_ptr_ref</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">auto_ptr_ref</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;</span><span class="p">(</span><span class="n">release</span><span class="p">());</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">Y</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="k">operator</span> <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">Y</span><span class="o">&gt;</span><span class="p">(</span><span class="n">release</span><span class="p">());</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unresolved Problems In C++]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/20/unresolved-problems-in-c-plus-plus/"/>
    <updated>2012-11-20T15:26:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/20/unresolved-problems-in-c-plus-plus</id>
    <content type="html"><![CDATA[<h1>C++中还不清楚的问题清单：</h1>

<p>最近一直在看C++的书，这里想吧我所能想到的、曾经遇到的还未能解决的C++的问题和概念列出来。</p>

<p>1、public、protected、private的三种继承的区别。。
2、结构体的计算方式
3、STL的容器类和算法类
4、多重继承。
5、虚函数。
6、static_cast、dynamic_cast、const_cast、reinterpret_cast的区别
7、显式类型转换、隐式类型转换、构造函数、成员函数、非成员函数类型转换
8、作用域、名字查找规则（类内、类的成员函数内、类外、单一文件内、多个文件中）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX SYSTEMS PROGRAMMING CHAPTER 1]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/20/unix-systems-programming-chapter-1/"/>
    <updated>2012-11-20T13:30:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/20/unix-systems-programming-chapter-1</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The C++ STANDARD LIBRARY CHAPTER 3]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-3/"/>
    <updated>2012-11-20T09:20:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-3</id>
    <content type="html"><![CDATA[<h1>C++标准库-读书笔记-第三章&#8211;一般概念</h1>

<h3>3.2头文件</h3>

<h1>include &lt;stdlib.h>和#include <cstdlib>的区别在于后者的标识符只定义在namespace std中，而前者的标识符默认是全局作用域。</h1>

<h3>3.3错误处理和异常处理</h3>

<p>标准异常类别可分为三组：</p>

<pre><code>1. 语言本身支持的异常
2. C++标准库发出的异常
3. 程序作用域之外发出的异常
</code></pre>

<p>C++的异常继承体系：
![C++<em>Standard_Exceptions_Hierarchy][source/images/myimages/C++</em>Standard_Exceptions_Hierarchy.png]</p>

<h4>语言本身支持的异常</h4>

<p>此类异常用意支撑某些语言特性，所以他们是核心语言的一部分。如果以下操作失败，就会抛出出这一类异常。</p>

<ul>
<li>new失败，抛出bad_alloc异常（除非若用new的nothorw版本）。由于这个异常可能于任何时间在任何较复杂的程序中发生，所以是最重要的一个异常。</li>
<li>运行阶段，当dynamic_cast失败会抛出bad_cast异常</li>
<li>RTTI中，如果typid的参数为零或空，typeid抛出bad_typeid异常。</li>
<li>发生非预期异常，bad_exception异常会接手处理。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">E1</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">E2</span><span class="p">;</span>  <span class="c1">// not derived from E1</span>
</span><span class='line'><span class="kt">void</span> <span class="n">f</span><span class="p">()</span> <span class="n">thorw</span><span class="p">(</span><span class="n">E1</span><span class="p">)</span>  <span class="c1">// throws only exceptions of type E1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="n">E1</span><span class="p">();</span>        <span class="c1">// throws exception of type E1</span>
</span><span class='line'>  <span class="k">throw</span> <span class="n">E2</span><span class="p">();</span>        <span class="c1">// calls unexpected(), which calls terminate()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而若果你在你的异常规格总列出bad_exception，那么unexpected()总是会重新抛出(rethrows)bad_exception异常</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">E1</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">E2</span><span class="p">;</span>  <span class="c1">// not derived from E1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">f</span><span class="p">()</span> <span class="n">thorw</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_exception</span><span class="p">)</span>  
</span><span class='line'>  <span class="c1">// throws only exceptions of type E1 or</span>
</span><span class='line'>  <span class="c1">// bad_exception for any other exception type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="n">E1</span><span class="p">();</span>        <span class="c1">// throws exception of type E1</span>
</span><span class='line'>  <span class="k">throw</span> <span class="n">E2</span><span class="p">();</span>        <span class="c1">// calls unexpected(), which throws bad_exception</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>异常类型的头文件</h4>

<p>基础类别exception和bad_exception定义于<exception>。bad_alloc定义于<new>。bad_cast和bad_typeid定义于<typeinfo>。ios_base::failure定义于<ios>。
其他异常类型定义于<stdexcept></p>

<h4>异常类型的成员</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">exception</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span><span class="o">:</span>
</span><span class='line'>          <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// print implementation-defined error message</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>抛出标准异常</h4>

<p>可以在自己的程序库或程序内部抛出某些标准异常，传递string参数作为what()的描述字符串。例如logic_error定义：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">logic_error</span> <span class="o">:</span> <span class="k">public</span> <span class="n">exception</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span><span class="o">:</span>
</span><span class='line'>          <span class="k">explicit</span> <span class="n">logic_error</span> <span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">whatstring</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>提供这种功能的标准异常有：<strong>logic_error</strong>、<strong>runtime_error</strong>、ios_base::failure以及他们的衍生类型。</p>

<h4>3.3.4从标准异常华类型中派生新类型</h4>

<h3>3.4配置器(Allocators)</h3>

<p>C++标准程序库使用allocator来处理存储器配置和定址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The C++ STANDARD LIBRARY CHAPTER 2]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-2/"/>
    <updated>2012-11-20T08:13:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/20/the-c-plus-plus-standard-library-chapter-2</id>
    <content type="html"><![CDATA[<h1>C++标准库-读书笔记-第二章</h1>

<h4>2.1</h4>

<p>1、标准程序库并非基于某本书或某一个现成的函数库，而是将各种不同的类（classes）整合而成。你会发现不同组件背后有不同的设计原则，string class 和 STL之间的差别就是很好的例子，
后者是一个数据结构和算法框架。</p>

<ul>
<li>string classes 被设计为安全易用的组件，其界面几乎不言自明，并能对许多可能的错误作检验。</li>
<li>STL的设计目标，是将不同的算法和数据结构结合在一起，并获取最佳效率，所以STL并不非常便利，也不检验许多可能的逻辑错误。要运用STL强大的框架和优异的效率，你就必须通晓其概念并小心运用。</li>
</ul>


<h4>2.2.1 template</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">max</span> <span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Nontype Templates（非类型模板参数）</h6>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span> <span class="n">flags32</span><span class="p">;</span>
</span><span class='line'><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">50</span><span class="o">&gt;</span> <span class="n">flags50</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些bitsets由于使用不同的template参数，所以有不同的类型。</p>

<h6>Default Template Parameters</h6>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="k">class</span> <span class="nc">container</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">;</span>
</span><span class='line'><span class="n">MyClass</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">x1</span><span class="p">;</span>     <span class="c1">// equivalent to: MyClass&lt;int, vector&lt;int&gt; &gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>typename - 被用来作为类型之前的标识符。</h5>

<h5>成员模板</h5>

<p>类成员模板可以是个template，但它既不能是virtual，也不能有预设参数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="n">T</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">X</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="kt">void</span> <span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&lt;</span><span class="n">X</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span>    <span class="cm">/* allows different template types */</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">value</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>           <span class="cm">/* different types can&#39;t access private or protected members */</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span> <span class="n">getValue</span> <span class="p">()</span> <span class="k">const</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">MyClass</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="n">MyClass</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>  <span class="c1">// OK, (int is assignable to double)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>template copy constructor</strong>
copy constructor with implicit type conversion does not hide implicit copy constructor</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// copy constructor with implicit type conversion</span>
</span><span class='line'>      <span class="c1">// does not hide implicit copy constructor</span>
</span><span class='line'>      <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">U</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="n">MyClass</span> <span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">MyClass</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">xd</span><span class="p">;</span>
</span><span class='line'>  <span class="n">MyClass</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">xd2</span><span class="p">(</span><span class="n">xd</span><span class="p">);</span> <span class="c1">// calls built-in copy constructor</span>
</span><span class='line'>  <span class="n">MyCLass</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">xi</span><span class="p">(</span><span class="n">xd</span><span class="p">);</span>     <span class="c1">// calls template copy constructor</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Nested Template Classes</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">NestedClass</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>namespace</h4>

<p>如果某个函数的一个或多个引用类型，都定义在函数所在的namespace中，那么你不必为该函数指定namespace。这个规则称为Koening lookup。
例如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// define identifiers in namespace josuttis</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">josuttis</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">File</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">myGlobalFunc</span><span class="p">(</span><span class="k">const</span> <span class="n">File</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">josuttis</span><span class="o">::</span><span class="n">File</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="n">myGlobalFunc</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>    <span class="c1">// OK, lookup finds josuttis::myGlobalFunc()</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>using declaration</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span> <span class="n">josuttis</span><span class="o">::</span><span class="n">File</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">josuttis</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.2.6关键字explicit</h5>

<p>explicit可以禁止“但参数构造函数”被用于自动类型转换。
例如可以声明一个构造函数，以stack的初始大小为参数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">stack</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">explicit</span> <span class="n">Stack</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">);</span>    <span class="c1">// create stack with initial size</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>explicit阻止了一个int自动转型为Stack</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Stack</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>      <span class="c1">// not permitted</span>
</span></code></pre></td></tr></table></div></figure>


<p>explicit 同样阻止了以下情况</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Stack</span> <span class="n">s1</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
</span><span class='line'><span class="n">Stack</span> <span class="n">s2</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>    <span class="c1">// ERROR</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.2.8 常量静态成员的初始化</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">elems</span><span class="p">[</span><span class="n">num</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">num</span><span class="p">;</span>        <span class="c1">// no initialization here?? </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading notes]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/18/reading-notes/"/>
    <updated>2012-11-18T17:16:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/18/reading-notes</id>
    <content type="html"><![CDATA[<p>读书笔记：
记录一下自己目前在读的书：</p>

<p>由于目前的事情比较多，而且要掌握的东西也挺多的，觉得一直在看一本书比较容易精神疲劳，所以就同时看了基本书。不过，这也难以避免的造成了许多内容看过就忘记了。甚至可能连书名也会忘记。。因此，为了备忘，就在这里记录自己目前正在看的书以及已经看完的部分。</p>

<p>1、UNIX环境高级编程:除了书中最后两章以及书中的一部分章节没有看外，基本上是把这本书翻过一遍了。不过书中的要注意的细节实在太多，还必须经常翻翻并且多敲敲书上的代码才肯尼融汇贯通。</p>

<p>2、C++PRIMER:最近又把前面的一半重新看了一遍，但是从STL开始的后面那部分还不是特别熟，要找个时间看。</p>

<p>3、Effective C++:目前真在努力看的一本书，已经看到第30个条款了。</p>

<p>4、C++标准程序库-自修教程与参考手册:个人感觉这门书讲STL讲得很好，目前只是看到了第6章STL容器</p>

<p>5、LINUX+SHELL脚本攻略：刚刚起步。</p>

<p>6、其他。。暂时未想起来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install_octopress_on_arch]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/16/install-octopress-on-arch/"/>
    <updated>2012-11-16T15:01:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/16/install-octopress-on-arch</id>
    <content type="html"><![CDATA[<h2>install rvm on archlinux</h2>

<h3>1.安装 git</h3>

<p>$ sudo pacman -S git</p>

<h3>2.安装 rvm[2]</h3>

<p>$ curl https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable</p>

<h3>3.在 .bashrc/.zshrc 加入RVM函数</h3>

<p>$ echo &#8216;[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm&#8217; >> ~/.zshrc
source ~/.zshrc</p>

<h3>4.根据安装脚本提示输入</h3>

<p>$ source /home/jamel/.rvm/scripts/rvm</p>

<h3>5.安装依赖包（下面命令会输出一个指南，直接复制其中的命令就行）:</h3>

<p>$ rvm requirements</p>

<!--more-->


<p>Result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To install rbx and/or Ruby 1.9 head (MRI) (eg. 1.9.2-head),
</span><span class='line'>then you must install and use rvm 1.8.7 first.
</span><span class='line'>
</span><span class='line'>Additional Dependencies:
</span><span class='line'># For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
</span><span class='line'>  ruby: pacman -Sy --noconfirm gcc patch curl zlib readline libxml2 libxslt git autoconf automake diffutils make libtool bison subversion
</span><span class='line'>
</span><span class='line'># For JRuby, install the following:
</span><span class='line'>  jruby: pacman -Sy --noconfirm jdk7-openjdk jre7-openjdk curl
</span><span class='line'>  jruby-head: pacman -Sy apache-ant
</span><span class='line'>
</span><span class='line'># For IronRuby, install the following:
</span><span class='line'>  ironruby: pacman -Sy --noconfirm mono</span></code></pre></td></tr></table></div></figure>


<h3>6.根据上面的&#8221;For Ruby&#8221;的命令提示输入命令：</h3>

<p>$ pacman -Sy &#8211;noconfirm gcc patch curl zlib readline libxml2 libxslt git autoconf automake diffutils make libtool bison subversion</p>

<h3>7.安装ruby 1.9.2并使用</h3>

<p>$ rvm install 1.9.2 &amp;&amp; rvm use 1.9.2</p>

<h3>8.保持rubygems最新</h3>

<p>$ rvm rubygems latest</p>

<h3>9.检查ruby版本是否为1.9.2</h3>

<p>$ ruby -v</p>

<h2>安装Octopress</h2>

<h1>clone octopress</h1>

<p>$ git clone https://github.com/imathis/octopress.git octopress
$ cd octopress</p>

<h1>安装依赖</h1>

<p>$ gem install bundler
$ bundle install</p>

<h1>安装默认主题</h1>

<p>$ rake install</p>

<h1>设定octopress，参见[4]</h1>

<h1>&#8230;&#8230;</h1>

<h1>生成博客</h1>

<p>$ rake generate #生成
$ rake watch    #实时观察变更
$ rake preview  #在http://localhost:4000上预览</p>

<h1>配置github</h1>

<p>$ rake setup_github_pages #按提示操作即可</p>

<h1>推送博客</h1>

<p>$ rake deploy</p>

<h1>或者</h1>

<p>$ rake push</p>

<h4>Bugs</h4>

<ol>
<li>rake generate时报错</li>
</ol>


<pre><code>rake aborted!
You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. Using bundle exec may solve this.

这是因为Gemfile.lock不更新的原因，用bundle update可更新，但octopress不推荐更新Gemfile.lock。解决办法是用以下命令来替代：

# 其他rake命令也要如此，直到上游更新了Gemfile.lock。
bundle exec rake generate
</code></pre>

<ol>
<li>其余可能出现的bug：
  http://blog.gonzih.org/blog/2011/09/21/fix-octopress-pygments-error-on-arch-linux/
  http://jgarber.lighthouseapp.com/projects/13054/tickets/245-error-installing-redcloth-428</li>
</ol>


<h3>Bugs Solution</h3>

<p>下面这些是我花了一两个小时才解决了一些冲突问题。
首先输入rake install后出现了这个问题：</p>

<pre><code>You have already activated rake 10.0.1, but your Gemfile requires rake 0.9.2. Using bundle exec may solve this.
</code></pre>

<p>经过搜索，可以这样解决</p>

<pre><code>rvm use @global &amp;&amp; gem uninstall rake -v 10.0.1  
rvm use @ &amp;&amp; gem uninstall rake -v 10.0.1
</code></pre>

<p>原理就是停止当前正在激活的rake, 然后再删除它。</p>

<p>然后又出现了新的问题</p>

<pre><code>File "&lt;string&gt;", line 1
    import sys; print sys.executable
                        ^
SyntaxError: invalid syntax
</code></pre>

<p>在这个网站<a href="http://blog.dayanjia.com/2012/04/fix-rubypython-bug-in-arch-linux/">http://blog.dayanjia.com/2012/04/fix-rubypython-bug-in-arch-linux/</a>中发现了原来是python2和python3的冲突问题，晕&#8230;archlinux用的是python3，而octopress默认用的是python2</p>

<pre><code>然后照着教程在plugins下新建一个newfile.rv文件，内容如下：

require 'pygments'

if !!RUBY_PLATFORM['linux']
    RubyPython.configure :python_exe =&gt; '/usr/bin/python2.7'
end
</code></pre>

<p>然而却出现了这样的问题：
LoadError: Could not open library &#8216;lib.so&#8217;: lib.so: cannot open shared object file: No such file or directory</p>

<p>这个问题在<a href="https://github.com/tmm1/pygments.rb/issues/10">https://github.com/tmm1/pygments.rb/issues/10</a>中有描述，看得很辛苦，测试了许多种方法（汗，居然没人总结该怎么做）后发现如果在ubuntu中可以安装python-devel后可能再建一些符号连接即可，然而在arch中没有devel包的。尝试了许久，最后发现只要在Gemfile中更改</p>

<pre><code>gem 'pygments.rb', '~&gt; 0.2.12'
</code></pre>

<p>为：</p>

<pre><code>gem 'pygments.rb', '~&gt; 0.3.2'
</code></pre>

<p>即可。连plugins下的那个rb文件都可以不用。</p>

<p>也听了讨论组的人所说，卸载原来的rubypython，换了最新版本的rubypython但发现这样一点用也没有。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell related commands]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/16/shell-related-commands/"/>
    <updated>2012-11-16T13:39:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/16/shell-related-commands</id>
    <content type="html"><![CDATA[<h3>更改默认的登陆shell</h3>

<p>以下命令可以更改默认的登陆shell:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chsh -s /bin/bash
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress test]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/15/octopress-test/"/>
    <updated>2012-11-15T15:02:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/15/octopress-test</id>
    <content type="html"><![CDATA[<h1>Just For test</h1>

<h3>include code:</h3>

<figure class='code'><figcaption><span> (test.js)</span> <a href='http://silvernight.github.com/downloads/code/test.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * sample javascript from xui</span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>  <span class="p">};</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span>  <span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>   <span class="p">};</span>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>include picture</h3>

<p><img src="http://i5.minus.com:81/i01yeD3zCWPoV.jpg" alt="test picture" /></p>

<!--more-->


<h3>include gist(gist 4076902)</h3>

<div><script src='https://gist.github.com/4076902.js?file='></script>
<noscript><pre><code>#include &lt;stdio.h&gt;

int main
{
  printf(&quot;hello world&quot;);
}</code></pre></noscript></div>


<h3>code block</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>#</h2>

<h3>jsfiddle</h3>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Q2v3n/embedded/js,resources,html,css,result/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning octopress]]></title>
    <link href="http://silvernight.github.com/blog/2012/11/15/learning-octopress/"/>
    <updated>2012-11-15T14:11:00+08:00</updated>
    <id>http://silvernight.github.com/blog/2012/11/15/learning-octopress</id>
    <content type="html"><![CDATA[<h1>Learning Octopress</h1>

<h2>Sharing Code Snippets</h2>

<p>octopress的分享代码的功能非常强大。它提供了多种分享代码的功能。
如下：</p>

<ul>
<li> A Sass port of Solarized syntax highlighting created specifically for Octopress.</li>
<li> Gist code embedding - by Brandon Tilly.</li>
<li> Insert code snippets from your filesystem with a download link.</li>
<li> Easy inline code blocks with &lt;figure&gt; and &lt;figcaption&gt; and optional download links.</li>
<li> Pygments caching - a Jekyll community plugin.</li>
<li> Table based line numbers added with javascript.</li>
</ul>


<!--more-->


<h3>Solarized highlighting</h3>

<p>Solarized has a beautiful syntax highlighting color scheme, but reproducing it requires a highly sophisticated highlighting engine. Pygments (the highlighter Jekyll uses) processes code snippets into styleable HTML, but it isn’t nearly as powerful as the highlighting engine in Vim for example.</p>

<h6>注意：为了避免被octopress解析，下面代码中的{和}与%的中间都加了个空格。</h6>

<h3>Backtick Code blocks</h3>

<h4>syntax</h4>

<pre><code>``` [language] [title] [url] [link text]
code snippet
```
</code></pre>

<h3>Gist embedding</h3>

<p>刚刚研究了一下gist，发现gist原来是github提供的一种代码分享的功能，可以在githbu上创建gist代码，然后通过gist id来引用代码，Gist代码会存放在git的仓库，因此可以用git clone来克隆gist代码非常方便。
在octopress中可以这样引用gist代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % gist gist_id [filename] % }</span></code></pre></td></tr></table></div></figure>


<h3>Include Code Snippets</h3>

<h4>syntax</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % include_code [title] [lang:language] path/to/file % }</span></code></pre></td></tr></table></div></figure>


<h3>Inline Code blocks</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % codeblock [title] [lang:objc] [url] [link text] % }
</span><span class='line'>[rectangle setX: 10 y: 10 width: 20 height: 20];
</span><span class='line'>{ % endcodeblock % }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
